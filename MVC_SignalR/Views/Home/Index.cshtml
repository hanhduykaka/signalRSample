@{
    ViewBag.Title = "Chat";
}
<style>
    #shape {
        width: 300px;
        height: 300px;
        color: blue;
        background-image: url('../../img/ball.png');
        background-repeat: no-repeat;
        background-size: 300px 300px;
    }
    body {
        font-family: 'Segoe UI', Arial, Helvetica, sans-serif;
        font-size: 16px;
    }
    #stockTable table {
        border-collapse: collapse;
    }
    #stockTable table th, #stockTable table td {
        padding: 2px 6px;
    }
    #stockTable table td {
        text-align: right;
    }
    #stockTable .loading td {
        text-align: left;
    }
</style>
<h2>Chat</h2>
<div class="container">
    <input type="text" id="message" />
    <input type="button" id="sendmessage" value="Send" />
    <input type="hidden" id="displayname" />
    <ul id="discussion"></ul>
</div>
<div id="shape"></div>

<h2>Live Stock Table</h2>
<div id="stockTable">
    <table border="1">
        <thead>
        <tr><th>Symbol</th><th>Price</th><th>Open</th><th>Change</th><th>%</th></tr>
        </thead>
        <tbody>
        <tr class="loading"><td colspan="5">loading...</td></tr>
        </tbody>
    </table>
</div>




@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.3.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs/"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;

            var moveShapeHub = $.connection.moveShapeHub,
                $shape = $("#shape"),
                // Send a maximum of 10 messages per second
                // (mouse movements trigger a lot of messages)
                messageFrequency = 10,
                // Determine how often to send messages in
                // time to abide by the messageFrequency
                updateRate = 10 / messageFrequency,
                shapeModel = {
                    left: 0,
                    top: 0,
                    displayName: $('#displayname').val()
                },
                moved = false;
            moveShapeHub.client.updateShape = function (model) {
                shapeModel = model;
                $shape.animate(shapeModel
                    ,
                    {
                        duration: updateRate, queue: false
                    });
            };

            function updateServerModel() {
                // Only update server if we have a new movement
                if (moved) {
                    console.log(shapeModel);
                    moveShapeHub.server.updateModel(shapeModel);
                    moved = false;
                } else {
                    $("#shape").html("");
                }
            }

            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            // Get the user name and store it to prepend to messages.
            $('#displayname').val(prompt('Enter your name:', ''));
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });

                $shape.draggable({
                    drag: function () {
                        $("#shape").html("Moving!");
                        shapeModel = $shape.offset();
                        //shapeModel.displayName = $('#displayname').val();
                        moved = true;
                    }
                });
                // Start the client side server update interval
                setInterval(updateServerModel, updateRate);

            });

        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }



        if (!String.prototype.supplant) {
            String.prototype.supplant = function (o) {
                return this.replace(/{([^{}]*)}/g,
                    function (a, b) {
                        var r = o[b];
                        return typeof r === 'string' || typeof r === 'number' ? r : a;
                    }
                );
            };
        }

        $(function () {

            var ticker = $.connection.stockTickerMini, // the generated client-side hub proxy
                up = '▲',
                down = '▼',
                $stockTable = $('#stockTable'),
                $stockTableBody = $stockTable.find('tbody'),
                rowTemplate = '<tr data-symbol="{Symbol}"><td>{Symbol}</td><td>{Price}</td><td>{DayOpen}</td><td>{Direction} {Change}</td><td>{PercentChange}</td></tr>';

            function formatStock(stock) {
                return $.extend(stock, {
                    Price: stock.Price.toFixed(2),
                    PercentChange: (stock.PercentChange * 100).toFixed(2) + '%',
                    Direction: stock.Change === 0 ? '' : stock.Change >= 0 ? up : down
                });
            }

            function init() {
                ticker.server.getAllStocks().done(function (stocks) {
                    $stockTableBody.empty();
                    $.each(stocks, function () {
                        var stock = formatStock(this);
                        $stockTableBody.append(rowTemplate.supplant(stock));
                    });
                });
            }

            // Add a client-side hub method that the server will call
            ticker.client.updateStockPrice = function (stock) {
                var displayStock = formatStock(stock),
                    $row = $(rowTemplate.supplant(displayStock));

                $stockTableBody.find('tr[data-symbol=' + stock.Symbol + ']')
                    .replaceWith($row);
            }

            // Start the connection
            $.connection.hub.start().done(init);

        });


    </script>
}